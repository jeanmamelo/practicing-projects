{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\jeanm\\\\react-native-firebase\\\\src\\\\screens\\\\HomeScreen\\\\HomeScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styles from \"./styles\";\nimport { firebase } from \"../../firebase/config\";\nexport default function HomeScreen(_ref) {\n  var route = _ref.route;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      entityText = _useState2[0],\n      setEntityText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entities = _useState4[0],\n      setEntities = _useState4[1];\n\n  var entityRef = firebase.firestore().collection('entities');\n  var _route$params$user = route.params.user,\n      id = _route$params$user.id,\n      email = _route$params$user.email,\n      fullName = _route$params$user.fullName;\n  var userID = id;\n  useEffect(function () {\n    entityRef.where(\"authorID\", \"==\", userID).orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var onAddButtonPress = function onAddButtonPress() {\n    if (entityText && entityText.length > 0) {\n      var timestamp = firebase.firestore.FieldValue.serverTimestamp();\n      var data = {\n        text: entityText,\n        authorID: userID,\n        createdAt: timestamp\n      };\n      entityRef.add(data).then(function (_doc) {\n        setEntityText('');\n        Keyboard.dismiss();\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n  };\n\n  var renderEntity = function renderEntity(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return React.createElement(View, {\n      style: styles.entityContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.entityText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, index, \". \", item.text));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Add new entity\",\n    placeholderTextColor: \"#aaaaaa\",\n    onChangeText: function onChangeText(text) {\n      return setEntityText(text);\n    },\n    value: entityText,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onAddButtonPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }, fullName))), entities && React.createElement(View, {\n    style: styles.listContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, React.createElement(FlatList, {\n    data: entities,\n    renderItem: renderEntity,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    removeClippedSubviews: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/jeanm/react-native-firebase/src/screens/HomeScreen/HomeScreen.js"],"names":["React","useEffect","useState","styles","firebase","HomeScreen","route","entityText","setEntityText","entities","setEntities","entityRef","firestore","collection","params","user","id","email","fullName","userID","where","orderBy","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","data","push","error","console","log","onAddButtonPress","length","timestamp","FieldValue","serverTimestamp","text","authorID","createdAt","add","then","_doc","Keyboard","dismiss","catch","alert","renderEntity","item","index","entityContainer","container","formContainer","input","button","buttonText","listContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native'\r\nimport styles from './styles';\r\nimport { firebase } from '../../firebase/config'\r\n\r\nexport default function HomeScreen({route}) {\r\n\r\n    const [entityText, setEntityText] = useState('')\r\n    const [entities, setEntities] = useState([])\r\n\r\n    const entityRef = firebase.firestore().collection('entities')\r\n\r\n    const { id, email, fullName } = route.params.user\r\n    const userID = id\r\n\r\n    useEffect(() => {\r\n        entityRef\r\n            .where(\"authorID\", \"==\", userID)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot(\r\n                querySnapshot => {\r\n                    const newEntities = []\r\n                    querySnapshot.forEach(doc => {\r\n                        const entity = doc.data()\r\n                        entity.id = doc.id\r\n                        newEntities.push(entity)\r\n                    });\r\n                    setEntities(newEntities)\r\n                },\r\n                error => {\r\n                    console.log(error)\r\n                }\r\n            )\r\n    }, [])\r\n\r\n    const onAddButtonPress = () => {\r\n        if (entityText && entityText.length > 0) {\r\n            const timestamp = firebase.firestore.FieldValue.serverTimestamp();\r\n            const data = {\r\n                text: entityText,\r\n                authorID: userID,\r\n                createdAt: timestamp,\r\n            };\r\n            entityRef\r\n                .add(data)\r\n                .then(_doc => {\r\n                    setEntityText('')\r\n                    Keyboard.dismiss()\r\n                })\r\n                .catch((error) => {\r\n                    alert(error)\r\n                });\r\n        }\r\n    }\r\n\r\n    const renderEntity = ({item, index}) => {\r\n        return (\r\n            <View style={styles.entityContainer}>\r\n                <Text style={styles.entityText}>\r\n                    {index}. {item.text}\r\n                </Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.formContainer}>\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholder='Add new entity'\r\n                    placeholderTextColor=\"#aaaaaa\"\r\n                    onChangeText={(text) => setEntityText(text)}\r\n                    value={entityText}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    autoCapitalize=\"none\"\r\n                />\r\n                <TouchableOpacity style={styles.button} onPress={onAddButtonPress}>\r\n                    <Text style={styles.buttonText}>{fullName}</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n            { entities && (\r\n                <View style={styles.listContainer}>\r\n                    <FlatList\r\n                        data={entities}\r\n                        renderItem={renderEntity}\r\n                        keyExtractor={(item) => item.id}\r\n                        removeClippedSubviews={true}\r\n                    />\r\n                </View>\r\n            )}\r\n        </View>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}